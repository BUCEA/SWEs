/**
 * @file vtk_out.cpp 
 * @author Christian Laguerre <christian.laguerre@math.cnrs.fr> (2012-2015)
 * @version 1.06.00
 * @date 2015-02-19
 *
 * @brief %VTK output
 * @details 
 * %Output format:
 * optimized for software compatible with vtk format (example: paraview).
 *
 * @copyright License Cecill-V2 \n
 * <http://www.cecill.info/licences/Licence_CeCILL_V2-en.html>
 *
 * (c) CNRS - Universite d'Orleans - BRGM (France)
 */
/* 
 *
 * This file is part of FullSWOF_2D software. 
 * <https://sourcesup.renater.fr/projects/fullswof-2d/> 
 *
 * FullSWOF_2D = Full Shallow-Water equations for Overland Flow, 
 * in two dimensions of space.
 * This software is a computer program whose purpose is to compute
 * solutions for 2D Shallow-Water equations.
 *
 * LICENSE
 *
 * This software is governed by the CeCILL license under French law and
 * abiding by the rules of distribution of free software. You can use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * <http://www.cecill.info>.
 *
 * As a counterpart to the access to the source code and rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty and the software's author, the holder of the
 * economic rights, and the successive licensors have only limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading, using, modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean that it is complicated to manipulate, and that also
 * therefore means that it is reserved for developers and experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and, more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 *
 ******************************************************************************/


#include "vtk_out.hpp"

Vtk_Out::Vtk_Out(Parameters & par):Output(par){
  
  /**
   * @details
   * Defines the output name huz_evolution.dat
   * @param[in] par parameter, contains all the values from the parameters file.
   */
  
  outputDirectory = par.get_outputDirectory();
  namefile = outputDirectory + "huz_evolution.dat";
  cout << endl;
  cout << "Output vtk DataFile:"<< endl;
  count=1;
  
}

void Vtk_Out::write(TAB h,TAB u,TAB v,TAB z, SCALAR time){
  
  /**
   * @details
   * Writes the values of Scheme#z, Scheme#h, Scheme#u (=q1/h), Scheme#v (=q2/h), Scheme#h+ Scheme#z (free surface),
   * \f$ |U| = \sqrt{u^2+v^2}\f$, the Froude number \f$ \frac{|U|}{\sqrt{gh}}\f$, Scheme#q1, Scheme#q2,
   * and \f$ h|U|\f$ at the current time in huz_evolution.dat***.vtk. \n
   * If the water height is too small, we replace it by 0, the velocity is null and the Froude number does not exist.
   * @param[in] h the water height.
   * @param[in] u first componant of the velocity.
   * @param[in] v second componant of the velocity.
   * @param[in] z the topography.
   * @param[in] time the current time.
   * @note If huz_evolution.dat***.vtk cannot be opened, the code will exit with failure termination code.
   */
  
  char time_saved[NB_CHAR]; 
  char ncount[NB_CHAR]; 
  sprintf(time_saved,"%f",time);
  sprintf(ncount,"%d",count);
  cout << endl;
  cout << "# time : "<< time_saved  << " seconds "<<endl;
  cout << "File number =" << ncount << endl;
  string namefile_copy = namefile; /*Permit to have the name file huz_evolution.datxxx.vtk with xxx the number of time saved  */
  namefile_copy +=ncount;
  namefile_copy += ".vtk";
  
  ofstream outsave(namefile_copy.c_str(),ios::out);  
  if (!outsave){ 
    cout << "Impossible to open the " << namefile_copy.c_str() <<" file\n";
    cout << "Verify if the directory " << outputDirectory <<" exists\n";
    exit(EXIT_FAILURE);
  }
  
  outsave << "# vtk DataFile Version 2.0"  << endl;
  outsave << "Generated by "<< VERSION  << endl;
  outsave << "ASCII"  << endl;
  outsave << "DATASET RECTILINEAR_GRID"  << endl;
  outsave << "DIMENSIONS " << NXCELL+1 << " " << NYCELL+1 <<" 1"  << endl;
  outsave << "X_COORDINATES "<< NXCELL+1 << " " << "float" << endl;
  
  for(int i=0;i<NXCELL+1;i++){
    outsave << i*DX <<" ";
  }
  outsave << endl;
  
  outsave << "Y_COORDINATES "<< NYCELL+1 << " " << "float" << endl;
  for(int j=0;j<NYCELL+1;j++){
    outsave << j*DY <<" ";
  }
  outsave << endl;
  outsave << "Z_COORDINATES "<< 1 << " " << "float" << endl;
  outsave << 0. << endl;
  outsave << endl;
  
  outsave << "CELL_DATA " << NXCELL*NYCELL << endl;
  
  outsave << "SCALARS z double 1"  << endl;
  outsave << "LOOKUP_TABLE default"  << endl;
  for (int j=1 ; j<NYCELL+1 ; j++){
    for (int i=1;i<NXCELL+1;i++){
      outsave << z[i][j] << " ";
    }// end of i loop
  }// end of j loop
  outsave  << endl;
  
  
  outsave << "SCALARS h double 1"  << endl;
  outsave << "LOOKUP_TABLE default"  << endl;
  
  for (int j=1 ; j<NYCELL+1 ; j++){
    for (int i=1;i<NXCELL+1;i++){
      outsave <<   h[i][j] << " " ;
    }// end of i loop
  }// end of j loop
  
  outsave  << endl;
  
  outsave << "SCALARS u double 1"  << endl;
  outsave << "LOOKUP_TABLE default"  << endl;
  
  for (int j=1 ; j<NYCELL+1 ; j++){
    for (int i=1;i<NXCELL+1;i++){
      outsave <<   u[i][j] << " " ;
    }// end of i loop
  }// end of j loop
  
  outsave  << endl;  
  
  outsave << "SCALARS v double 1"  << endl;
  outsave << "LOOKUP_TABLE default"  << endl;
  
  for (int j=1 ; j<NYCELL+1 ; j++){
    for (int i=1;i<NXCELL+1;i++){
      outsave <<   v[i][j] << " " ;
    }// end of i loop
  }// end of j loop
  
  outsave  << endl;
  
outsave << "VECTORS U float" << endl;
  for (int j=1 ; j<NYCELL+1 ; j++){
    for (int i=1;i<NXCELL+1;i++){
      outsave <<   u[i][j] << " " <<   v[i][j] << " " << 0. << endl; ;
    }// end of i loop
  }// end of j loop
  
  outsave  << endl;
  
  outsave << "SCALARS h+z double 1"  << endl;
  outsave << "LOOKUP_TABLE default"  << endl;
  
  for (int j=1 ; j<NYCELL+1 ; j++){
    for (int i=1;i<NXCELL+1;i++){
      outsave <<   h[i][j]+z[i][j] << " " ;
    }// end of i loop
  }// end of j loop
  
  outsave  << endl;  
  
  outsave << "SCALARS norm_U double 1"  << endl;
  outsave << "LOOKUP_TABLE default"  << endl;
  
  for (int j=1 ; j<NYCELL+1 ; j++){
    for (int i=1;i<NXCELL+1;i++){
      outsave << sqrt(pow(u[i][j],2)+pow(v[i][j],2))   << " " ;
    }// end of i loop
  }// end of j loop
  
  outsave  << endl;
  
  outsave << "SCALARS Froude double 1"  << endl;
  outsave << "LOOKUP_TABLE default"  << endl;
  
  for (int j=1 ; j<NYCELL+1 ; j++){  
    for (int i=1;i<NXCELL+1;i++){
      if (h[i][j]<HE_CA){
        outsave << sqrt(pow(u[i][j],2)+pow(v[i][j],2))/sqrt(GRAV*HE_CA) << " " ;
      }
      else{
        outsave << sqrt(pow(u[i][j],2)+pow(v[i][j],2))/sqrt(GRAV*h[i][j]) << " " ;
      }
    }// end of i loop
  }// end of j loop
  
  outsave  << endl;  
  
  outsave << "SCALARS qx double 1"  << endl;
  outsave << "LOOKUP_TABLE default"  << endl;
  
  for (int j=1 ; j<NYCELL+1 ; j++){
    for (int i=1;i<NXCELL+1;i++){
      outsave <<  h[i][j]*u[i][j]  << " " ;
    }// end of l loop
  }// end of i loop
  
  outsave  << endl;
  
  outsave << "SCALARS qy double 1"  << endl;
  outsave << "LOOKUP_TABLE default"  << endl;
  
  for (int j=1 ; j<NYCELL+1 ; j++){  
    for (int i=1;i<NXCELL+1;i++){
      outsave <<  h[i][j]*v[i][j]  << " " ;
    }// end of i loop
  }// end of j loop
  
  outsave  << endl;  
  
  outsave << "SCALARS q double 1"  << endl;
  outsave << "LOOKUP_TABLE default"  << endl;
  
  for (int j=1 ; j<NYCELL+1 ; j++){  
    for (int i=1;i<NXCELL+1;i++){
      outsave <<  h[i][j]*sqrt(pow(u[i][j],2)+pow(v[i][j],2))  << " " ;
    }// end of i loop
  }// end of j loop
  
  
  count++;
}


Vtk_Out::~Vtk_Out(){
}


